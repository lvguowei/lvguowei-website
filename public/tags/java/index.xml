<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Guowei Lv</title>
    <link>https://www.lvguowei.me/tags/java/</link>
    <description>Recent content in Java on Guowei Lv</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Jul 2017 14:16:31 +0300</lastBuildDate>
    
	<atom:link href="https://www.lvguowei.me/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why Synchronize?</title>
      <link>https://www.lvguowei.me/post/why-synchronize/</link>
      <pubDate>Sat, 01 Jul 2017 14:16:31 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/why-synchronize/</guid>
      <description>We are going to write a program, a bit program, lots of stuff happening here and there, ok, big program. Now, lots of threads of course, loads and loads of them, we have to synchronize, yes we do, I think so, yeah, synchronize very important stuff, good idea, but, why?
Remember what we have been taught in school? That mutex thing? Mutual Exclusive? That 2 threads are trying to read and write some mutual value at the same time and create a big mess?</description>
    </item>
    
    <item>
      <title>Master Mind in TDD</title>
      <link>https://www.lvguowei.me/post/master-mind-tdd/</link>
      <pubDate>Mon, 21 Nov 2016 21:29:52 +0200</pubDate>
      
      <guid>https://www.lvguowei.me/post/master-mind-tdd/</guid>
      <description>In one of Uncle Bob&amp;rsquo;s video, he talked about this game called &amp;ldquo;Master Mind&amp;rdquo; when he was teaching Single Responsibility Principle(SRP). After googled the game, turns out that it is actually a quite famous board game. For more information about the game, please look here -&amp;gt; wiki.
The game can be played by two people. One comes up with a code, the other one tries to guess. The one who comes up with the code has to score the guesser&amp;rsquo;s guess based on some rules.</description>
    </item>
    
    <item>
      <title>Payroll Case Study</title>
      <link>https://www.lvguowei.me/post/payroll-case-study/</link>
      <pubDate>Sun, 20 Nov 2016 14:51:39 +0200</pubDate>
      
      <guid>https://www.lvguowei.me/post/payroll-case-study/</guid>
      <description>I was watching some Uncle Bob video some day which talked about how to design the architecture of a system. In that video, he gave a case study of a payroll system, I found the souce code and it is actually implemented in C++, so I ported a Java version.
This is a very good example because it feels more realistic than most dummy demos out there. It also shows how to use POJO classes to layout the foundation without going too much into peripheral details like database.</description>
    </item>
    
  </channel>
</rss>