<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design and Architecture on Guowei Lv</title>
    <link>https://www.lvguowei.me/categories/design-and-architecture/</link>
    <description>Recent content in Design and Architecture on Guowei Lv</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Sep 2017 11:10:27 +0300</lastBuildDate>
    
	<atom:link href="https://www.lvguowei.me/categories/design-and-architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Evolution of Command Pattern (III)</title>
      <link>https://www.lvguowei.me/post/the-evolution-of-command-pattern-3/</link>
      <pubDate>Sat, 02 Sep 2017 11:10:27 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/the-evolution-of-command-pattern-3/</guid>
      <description>In this final part of the Command Pattern series, we will talk about yet another improvement on top of the Command Processor Pattern. It is described in the paper Command Revisited. From now on, we will just refer to it as the Command Revisited Pattern.
The paper is short and sweet but you might not find it to be to the point after the first glimpse.
The most beautiful part of the Command Revisited Pattern is that it provides a new perspective on the general Command Pattern.</description>
    </item>
    
    <item>
      <title>The Evolution of Command Pattern (II)</title>
      <link>https://www.lvguowei.me/post/the-evolution-of-command-pattern-2/</link>
      <pubDate>Sun, 27 Aug 2017 10:41:19 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/the-evolution-of-command-pattern-2/</guid>
      <description>In Part I, we discussed the original Command Pattern from the GoF Design Patterns book. In Part II, let&amp;rsquo;s talk about the improved version from another less known book: Pattern-Oriented Software Architecture Vol.1 (POSA in short).

In this book, there is a Command Processor pattern, which is based on the Command Pattern in GoF book. The most important difference is the newly introduced CommandProcessor.
In the original Command Pattern, it defines how to create Commands, and each Command has an execute and undo methods.</description>
    </item>
    
    <item>
      <title>The Evolution of Command Pattern (I)</title>
      <link>https://www.lvguowei.me/post/the-evolution-of-command-pattern/</link>
      <pubDate>Sat, 26 Aug 2017 09:52:18 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/the-evolution-of-command-pattern/</guid>
      <description>The Command Pattern is one of my favourite design patterns. It is also a good example that design patterns do change over time. In part I, we talk about the original version from the Design Patterns book.
This pattern first appears in the famous GoF book, described as follows:   Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.</description>
    </item>
    
    <item>
      <title>How (Not) To Store Password</title>
      <link>https://www.lvguowei.me/post/how-not-to-store-password/</link>
      <pubDate>Fri, 28 Jul 2017 21:07:55 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/how-not-to-store-password/</guid>
      <description>If you are a programmer, especially backend programmer, sooner or later you will face the problem of storing users&amp;rsquo; passwords. Even though at first sight this seems like an entry level problem that we should hand over to an intern, it is really not.
If you ask me how to do it. My first answer would be DON&amp;rsquo;T DO IT! I&amp;rsquo;m serious, try to avoid it as much as you can, just use Google or Facebook signin and your life goes on.</description>
    </item>
    
  </channel>
</rss>