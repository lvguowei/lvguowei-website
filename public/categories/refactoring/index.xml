<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Refactoring on Guowei Lv</title>
    <link>https://www.lvguowei.me/categories/refactoring/</link>
    <description>Recent content in Refactoring on Guowei Lv</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Oct 2016 19:38:57 +0300</lastBuildDate>
    
	<atom:link href="https://www.lvguowei.me/categories/refactoring/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Replace Nested Conditional With Guard Clauses</title>
      <link>https://www.lvguowei.me/post/replace-nested-conditional-with-guard-clauses/</link>
      <pubDate>Sat, 15 Oct 2016 19:38:57 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/replace-nested-conditional-with-guard-clauses/</guid>
      <description>I couldn&amp;rsquo;t remember who said that one of his favorite refactoring techniques is Replace Nested Conditional with Guard Clauses. When I looked into it, it did put a smile on my face despite its simplicity.
This is NOT about coding aesthetics, this is all about clarity.
 A method has conditional behavior that does not make clear the normal path of execution.
Use guard clauses for all the special cases.</description>
    </item>
    
    <item>
      <title>Unidirectional to Bidirectional</title>
      <link>https://www.lvguowei.me/post/unidirectional-to-bidirectional/</link>
      <pubDate>Sat, 15 Oct 2016 09:40:46 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/unidirectional-to-bidirectional/</guid>
      <description>It is very common in relational database that we have the following structure: A customer table has columns: customer-id, name. And an order table has columns: order-id, customer-id, order-date.
See that there is a customer-id in the order table, so that we can use it to get orders belongs to a certain customer. But there is no knowledge about the orders in customer table.
This is fine with database, but if we try to map this directly to java classes, we may end up with something like this:</description>
    </item>
    
    <item>
      <title>Duplicate Observed Data</title>
      <link>https://www.lvguowei.me/post/duplicate-observed-data/</link>
      <pubDate>Sat, 15 Oct 2016 05:35:31 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/duplicate-observed-data/</guid>
      <description>This is from the famous Refactoring book by Martin Fowler. When I was reading it, it feels very similar to the very popular MVP or MVVM.
The key idea is that in system that has user interface, the business logic should be separated from the user interface.
One example I can think of is the registration form, where there are input fields like username, email, phone number and password. We can have some logic that disable the Register button until all fields are filled and the phone number and email valid.</description>
    </item>
    
  </channel>
</rss>