<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional Programming on Guowei Lv</title>
    <link>https://www.lvguowei.me/categories/functional-programming/</link>
    <description>Recent content in Functional Programming on Guowei Lv</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Aug 2017 21:42:47 +0300</lastBuildDate>
    
	<atom:link href="https://www.lvguowei.me/categories/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Most Beautiful Program Ever Written</title>
      <link>https://www.lvguowei.me/post/the-most-beautiful-program-ever-written/</link>
      <pubDate>Thu, 17 Aug 2017 21:42:47 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/the-most-beautiful-program-ever-written/</guid>
      <description>It&amp;rsquo;s my 5th time trying to follow this video and things finally start to click in my head. So I think if I write down what is talked in the video, then I can just read my blog post for another 15 times instead of going through the video, that would be convenient.
OK, here is a gist of it. This guy is writing an Scheme interpreter in Scheme.</description>
    </item>
    
    <item>
      <title>Tree Vs Iterative Fibbonacci Numbers</title>
      <link>https://www.lvguowei.me/post/tree-vs-iterative-fib/</link>
      <pubDate>Sun, 30 Jul 2017 20:46:36 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/tree-vs-iterative-fib/</guid>
      <description>Being a programmer, you should be very familiar with Fibbonacci numbers. It is often being introduced when teaching recursion.
Tree Recursion Most likely the implementation of a function that calculate fib number is as follows:
(defn fib-tree [n] (cond (= n 0) 0 (= n 1) 1 :else (+ (fib-tree (- n 1)) (fib-tree (- n 2))))) This is just a direct translation from the Fibonacci number definition. Since it is straightforward and easy to understand, most textbooks use it as an typical example for illustrating recursive function.</description>
    </item>
    
    <item>
      <title>Understand Clojure Transducers 1</title>
      <link>https://www.lvguowei.me/post/understand-clojure-transducers/</link>
      <pubDate>Sun, 02 Apr 2017 08:35:01 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/understand-clojure-transducers/</guid>
      <description>In this post, we will define what is a transducer.
First, let&amp;rsquo;s take a closer look at map.
(map inc [1 2 3]) A straightforward way to explain what has happened is this: Increment each item by one in a list.
At first thought, this sounds like one step operation.
Now let&amp;rsquo;s change the requirement a bit. We want to increment each element by one and then sum them together.</description>
    </item>
    
    <item>
      <title>Clojure Tail Recursion By Example</title>
      <link>https://www.lvguowei.me/post/clojure-tail-recursion/</link>
      <pubDate>Mon, 27 Feb 2017 20:15:18 +0200</pubDate>
      
      <guid>https://www.lvguowei.me/post/clojure-tail-recursion/</guid>
      <description>What this recur and tail calls optimization is all about in Clojure? This blog post is trying to give a short yet easy to remember explanation.
Before explaining anything, let&amp;rsquo;s look at how we can implement + using recursion.
This is actually an interesting task, implement our +, since most of the time + is a built-in function. So to make things a bit more clear, let&amp;rsquo;s assume that our computer is drunk and forgets about how to do +, but it still remembers how to increment and decrement by 1.</description>
    </item>
    
    <item>
      <title>Named Arguments In Clojure</title>
      <link>https://www.lvguowei.me/post/named-arguments-in-clojure/</link>
      <pubDate>Fri, 24 Feb 2017 22:24:05 +0200</pubDate>
      
      <guid>https://www.lvguowei.me/post/named-arguments-in-clojure/</guid>
      <description>Sometimes I miss the named arguments feature in Python, for example:
def slope(p1=(0,0), p2=(1,1)) return (float(p2[1] - p1[1])) / (p2[0] - p1[0]) =&amp;gt; slope((1,2), (4,5)) =&amp;gt; slope(p2=(2, 1)) The equivalent in clojure can be done using destructuring:
(defn slope [&amp;amp; {:keys [p1 p2] :or {p1 [0 0] p2 [1 1]}}] (float (/ (- p2 1) (p1 1)) (- p2 0) (p1 0))) =&amp;gt; (slope :p1 [1 2] :p2 [3 4]) =&amp;gt; (slope :p2 [3 4]) =&amp;gt; (slope)</description>
    </item>
    
    <item>
      <title>Nested For Loops in Clojure</title>
      <link>https://www.lvguowei.me/post/nested-for-loops-in-clojure/</link>
      <pubDate>Fri, 03 Feb 2017 20:36:18 +0200</pubDate>
      
      <guid>https://www.lvguowei.me/post/nested-for-loops-in-clojure/</guid>
      <description>One awkwardness I haven&amp;rsquo;t really get rid of when using Clojure is for loops. Especially nested for loops that modifies some global variables. I find some solutions online where people use nested recursion or atoms, but can we just use one level of recursion? Let&amp;rsquo;s try out with a coding kata.
Problem: Given an array of numbers, find the biggest sum of any two numbers. The same item in array cannot be used twice.</description>
    </item>
    
  </channel>
</rss>