<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android Development on Guowei Lv</title>
    <link>https://www.lvguowei.me/categories/android-development/</link>
    <description>Recent content in Android Development on Guowei Lv</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Jul 2017 18:19:35 +0300</lastBuildDate>
    
	<atom:link href="https://www.lvguowei.me/categories/android-development/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>All You Need To Know About Android Espresso Testing (Part IV)</title>
      <link>https://www.lvguowei.me/post/all-you-need-to-know-about-android-espresso-testing-4/</link>
      <pubDate>Fri, 21 Jul 2017 18:19:35 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/all-you-need-to-know-about-android-espresso-testing-4/</guid>
      <description>In previous article, we talked about how to scroll to a certain position in RecyclerView in the test. In this article, we further discuss how to write a custom matcher and use it to scroll the RecyclerView.
Let&amp;rsquo;s say that we want to scroll to certain item in RecyclerView, but we don&amp;rsquo;t know the position. We can then create a custom Matcher, and use the matcher to determine which item to scroll to.</description>
    </item>
    
    <item>
      <title>All You Need To Know About Android Espresso Testing (Part III)</title>
      <link>https://www.lvguowei.me/post/all-you-need-to-know-about-android-espresso-testing-3/</link>
      <pubDate>Fri, 21 Jul 2017 16:44:41 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/all-you-need-to-know-about-android-espresso-testing-3/</guid>
      <description>In part II, we wrote a test case to verify that the app can create a task and the task will be seen on the screen. In this part III, we will demonstrate one technique on writing tests that involves a RecyclerView.
First we repeatly add some tasks, and then we verify that the last added task is on display. Note that since we are using a RecyclerView, the last item might not be seen, so we need to scroll the RecyclerView before checking.</description>
    </item>
    
    <item>
      <title>All You Need To Know About Android Espresso Testing (Part II)</title>
      <link>https://www.lvguowei.me/post/all-you-need-to-know-about-android-espresso-testing-2/</link>
      <pubDate>Fri, 21 Jul 2017 11:48:08 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/all-you-need-to-know-about-android-espresso-testing-2/</guid>
      <description>In Part I we talked about how to setup Espresso testing framework, what is the activity testing rule and how to use uiautomatorviewer to help us find id of the view quickly.
In this Part II, we will write some tests against a simple TODO list application. Lets get started.
About the App under test This is a very simple app with basically 2 screens. One to display a list of tasks:</description>
    </item>
    
    <item>
      <title>All You Need To Know About Android Espresso Testing (Part I)</title>
      <link>https://www.lvguowei.me/post/all-you-need-to-know-about-android-espresso-testing/</link>
      <pubDate>Thu, 13 Jul 2017 13:03:12 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/all-you-need-to-know-about-android-espresso-testing/</guid>
      <description>The Espresso testing framework really makes it easy to write UI tests for Android. In this first installment, I will go through how to set it up and write our first test case.
Let&amp;rsquo;s get started.
Set up Espresso Add the following dependencies to your gradle build file.
dependencies { // Other dependencies ... androidTestCompile &amp;#39;com.android.support.test.espresso:espresso-core:2.2.2&amp;#39; }  Understand the Rules in JUnit Why do they exist? We all know that in JUnit there is a setup method(annotated as @Before) and a teardown method(annotated as @After).</description>
    </item>
    
    <item>
      <title>Android Emulator Problem In Arch Linux</title>
      <link>https://www.lvguowei.me/post/android-emulator-problem-in-arch-linux/</link>
      <pubDate>Wed, 12 Jul 2017 14:13:07 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/android-emulator-problem-in-arch-linux/</guid>
      <description>I don&amp;rsquo;t remember since when, but now whenever I upgrade Android Studio from pacman, I cannot open my emulator, with some libGL error: unable to load driver: i965_dri.so error.
I tried to follow the solution online but found none of them is working out of the box, because Android Sdk changed some paths. Here is what actualy works now:
 cd ANDROID_SDK_PATH/emulator/lib64/libstdc++/ mv libstdc++.so.6 libstdc++.so.6.bak ln -s /usr/lib64/libstdc++.so.6 libstdc++.so.6  </description>
    </item>
    
    <item>
      <title>Android Custom View 101 (Part V)</title>
      <link>https://www.lvguowei.me/post/android-custom-view-101-5/</link>
      <pubDate>Sun, 09 Jul 2017 19:26:15 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/android-custom-view-101-5/</guid>
      <description>In this post, we will discuss how to implement a custom view group by extending an existing one, like a FrameLayout.
Let&amp;rsquo;s assume that we are building a layout for displaying user&amp;rsquo;s avatar. The requirement is if a user has an avatar, show the avatar picture, if not, show their initials as text.
So it would be good if we have some kind of AvatarView and Avatar data class (which contains name and avatar picture).</description>
    </item>
    
    <item>
      <title>Android Custom Views 101 (Part IV)</title>
      <link>https://www.lvguowei.me/post/android-custom-view-101-4/</link>
      <pubDate>Sun, 09 Jul 2017 16:41:23 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/android-custom-view-101-4/</guid>
      <description>In this installment, we talk about how to implement custom view group.
Custom View VS Custom ViewGroup When we think about a view, it is usually very simple and self contained. View represents, draws and handles interaction for a part of the screen.
Whereas ViewGroup is more about a binding relationship between views. ViewGroup is a specialized View that contains other Views. It has children.
As discussed before, in order for custom view to work correctly, it has to implement two methods: onDraw() and onMeasure(), and there is no need to implement onLayout() cause there is no children to layout.</description>
    </item>
    
    <item>
      <title>Android Custom Views 101 (Part III)</title>
      <link>https://www.lvguowei.me/post/android-custom-views-101-3/</link>
      <pubDate>Sat, 08 Jul 2017 14:47:36 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/android-custom-views-101-3/</guid>
      <description>In this post, we finally gonna take a look at how to implement onMeasure() properly.
When implementing a custom view, we should always consider its lower and upper size limit. In this case since the format of the time is fixed (hh:mm:ss). So we just need to get the width and height of it.
Suppose we set the MAX_TIME = &amp;quot;00:00:00&amp;quot;, then to get its width in pixel we can do:</description>
    </item>
    
    <item>
      <title>Android Custom Views 101 (Part II)</title>
      <link>https://www.lvguowei.me/post/android-custom-views-101-2/</link>
      <pubDate>Sat, 08 Jul 2017 09:55:03 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/android-custom-views-101-2/</guid>
      <description>In Part I, we talked about how to create a simple custom view. But we don&amp;rsquo;t really implement the onMeasure(). In this post, we will analyze what problems we will have if we omit the onMeasure().
You can think of how the measurements are made as a conversation between the child and parent views.
The child tells its parent how it wants to be laid out by using LayoutParams. This can either be set in xml file or programatically.</description>
    </item>
    
    <item>
      <title>Android Custom Views 101 (Part I)</title>
      <link>https://www.lvguowei.me/post/android-custom-view-101/</link>
      <pubDate>Wed, 05 Jul 2017 15:20:25 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/android-custom-view-101/</guid>
      <description>Creating your own custom android views can be useful and daunting at the same time. For a long time there is nobody really talks about it in a approachable way, until this lady Huyen Tue Dao. Let&amp;rsquo;s try to follow her approach and create some custom view!
In this part, we will create a very simple timer view that takes up the whole screen and display the current time.
 So let&amp;rsquo;s get started.</description>
    </item>
    
    <item>
      <title>Why we stopped using dagger and some thoughts</title>
      <link>https://www.lvguowei.me/post/why-remove-dagger/</link>
      <pubDate>Tue, 27 Jun 2017 20:40:41 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/why-remove-dagger/</guid>
      <description>I decided to stop using Dagger2 in our company&amp;rsquo;s android project. Why?
Don&amp;rsquo;t get me wrong, Dagger2 is still great. But though it is great, it is complex. Lots of concepts to wrap our heads around. What is a component, what is a module, what is the difference between subcomponent and dependency component, etc. In order to use it properly, we need to anwser all that questions, even you think you understand it, you still run into suprises now and then.</description>
    </item>
    
    <item>
      <title>Android Kata View Property Animator</title>
      <link>https://www.lvguowei.me/post/android-kata-view-property-animator/</link>
      <pubDate>Tue, 28 Mar 2017 20:49:08 +0300</pubDate>
      
      <guid>https://www.lvguowei.me/post/android-kata-view-property-animator/</guid>
      <description>Since I have been doing programming kata, why not adopt the same kata concept in Android programming?
Over the years I have accumulated some useful tools / tricks that I can show in kata form.
The goal is to keep it simple and easy to grasp and to the point.
This is the first one, which shows how to use ViewPropertyAnimator to animate show and hide of the FAB button.</description>
    </item>
    
  </channel>
</rss>